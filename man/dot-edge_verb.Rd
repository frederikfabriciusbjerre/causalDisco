% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knowledge.R
\name{.edge_verb}
\alias{.edge_verb}
\title{Handle forbid_edge() / require_edge() calls}
\usage{
.edge_verb(.kn, status, fml)
}
\arguments{
\item{.kn}{A \code{knowledge} object.}

\item{status}{Either \code{"forbidden"} or \code{"required"}.}

\item{fml}{A quosure that must wrap a two-sided formula.}
}
\description{
Internal helper that turns each \strong{two-sided formula} supplied by
\code{forbid_edge()} or \code{require_edge()} into concrete variable names, then passes
the cross-product to \code{.add_edges()}.
}
\examples{
# add a required edge via the internal edge verb using a quosure
data(tpcExample)
kn <- knowledge(tpcExample)

# create quosure using global environment
q <- rlang::quo(child_x1 ~ youth_x3)

# create edge using the internal function
kn <- causalDisco:::.edge_verb(kn, "required", q)

print(kn)

# error path
try(
  causalDisco:::.edge_verb(
    kn, "forbidden",
    rlang::quo(child_x1 ~ non_existent_var)
  )
)
try(
  causalDisco:::.edge_verb(
    kn, "invalid_type",
    rlang::quo(child_x1 ~ youth_x3)
  )
)
}
\keyword{internal}
