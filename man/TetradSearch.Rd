% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tetrad_search.R
\docType{class}
\name{TetradSearch}
\alias{TetradSearch}
\title{TetradSearch R6 Class}
\description{
The \code{TetradSearch} R6 class provides a high-level interface to the Tetrad
Java library. It allows users to set up different independence tests and
scoring functions, specify causal search algorithms, and run them on data.
}
\section{Fields}{

\describe{
\item{\code{data}}{(Java object) The Java object representing the loaded data.}
\item{\code{rdata}}{(data.frame) The original R data passed to the class.}
\item{\code{score}}{(Java object) The scoring function object.}
\item{\code{test}}{(Java object) The independence test object.}
\item{\code{alg}}{(Java object) The causal discovery algorithm object.}
\item{\code{mc_test}}{(Java object) The independence test object used for Markov checker.}
\item{\code{java}}{(Java object) The resulting graph or model object after running a search.}
\item{\code{knowledge}}{(Java object) The Tetrad \code{Knowledge} object storing background knowledge.}
\item{\code{params}}{(Java object) The Tetrad \code{Parameters} object with various configuration settings.}
\item{\code{bootstrap_graphs}}{(Java List) A list of bootstrapped graphs produced by Tetrad.}
\item{\code{mc_ind_results}}{(Java List) A list of results for independence tests from Markov checking.}
\item{\code{bhat}}{(Java object) BHat adjacency matrix from the Tetrad search, if requested.}
\item{\code{unstable_bhats}}{(Java object) A collection of BHat matrices from the Tetrad search, if requested.}
\item{\code{stable_bhats}}{(Java object) A collection of BHat matrices from the Tetrad search, if requested.}
}
}

\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TetradSearch-new}{\code{TetradSearch$new()}}
\item \href{#method-TetradSearch-set_test}{\code{TetradSearch$set_test()}}
\item \href{#method-TetradSearch-set_score}{\code{TetradSearch$set_score()}}
\item \href{#method-TetradSearch-set_alg}{\code{TetradSearch$set_alg()}}
\item \href{#method-TetradSearch-set_tier_forbidden_within}{\code{TetradSearch$set_tier_forbidden_within()}}
\item \href{#method-TetradSearch-set_knowledge}{\code{TetradSearch$set_knowledge()}}
\item \href{#method-TetradSearch-get_parameters_for_function}{\code{TetradSearch$get_parameters_for_function()}}
\item \href{#method-TetradSearch-run_search}{\code{TetradSearch$run_search()}}
\item \href{#method-TetradSearch-run_gango}{\code{TetradSearch$run_gango()}}
\item \href{#method-TetradSearch-set_bootstrapping}{\code{TetradSearch$set_bootstrapping()}}
\item \href{#method-TetradSearch-set_data}{\code{TetradSearch$set_data()}}
\item \href{#method-TetradSearch-set_verbose}{\code{TetradSearch$set_verbose()}}
\item \href{#method-TetradSearch-set_time_lag}{\code{TetradSearch$set_time_lag()}}
\item \href{#method-TetradSearch-get_data}{\code{TetradSearch$get_data()}}
\item \href{#method-TetradSearch-get_verbose}{\code{TetradSearch$get_verbose()}}
\item \href{#method-TetradSearch-get_knowledge}{\code{TetradSearch$get_knowledge()}}
\item \href{#method-TetradSearch-get_java}{\code{TetradSearch$get_java()}}
\item \href{#method-TetradSearch-get_string}{\code{TetradSearch$get_string()}}
\item \href{#method-TetradSearch-get_dag_string}{\code{TetradSearch$get_dag_string()}}
\item \href{#method-TetradSearch-get_dag_java}{\code{TetradSearch$get_dag_java()}}
\item \href{#method-TetradSearch-get_causal_learn}{\code{TetradSearch$get_causal_learn()}}
\item \href{#method-TetradSearch-get_graph_to_matrix}{\code{TetradSearch$get_graph_to_matrix()}}
\item \href{#method-TetradSearch-get_dot}{\code{TetradSearch$get_dot()}}
\item \href{#method-TetradSearch-get_xml}{\code{TetradSearch$get_xml()}}
\item \href{#method-TetradSearch-get_lavaan}{\code{TetradSearch$get_lavaan()}}
\item \href{#method-TetradSearch-bootstrap_graph}{\code{TetradSearch$bootstrap_graph()}}
\item \href{#method-TetradSearch-bootstrap_dot}{\code{TetradSearch$bootstrap_dot()}}
\item \href{#method-TetradSearch-is_legal_pag}{\code{TetradSearch$is_legal_pag()}}
\item \href{#method-TetradSearch-is_legal_pag_reason}{\code{TetradSearch$is_legal_pag_reason()}}
\item \href{#method-TetradSearch-all_subsets_independencefact_s}{\code{TetradSearch$all_subsets_independencefact_s()}}
\item \href{#method-TetradSearch-all_subsets_dependencefact_s}{\code{TetradSearch$all_subsets_dependencefact_s()}}
\item \href{#method-TetradSearch-markov_check}{\code{TetradSearch$markov_check()}}
\item \href{#method-TetradSearch-get_mc_ind_pvalues}{\code{TetradSearch$get_mc_ind_pvalues()}}
\item \href{#method-TetradSearch-get_adjustment_sets}{\code{TetradSearch$get_adjustment_sets()}}
\item \href{#method-TetradSearch-clone}{\code{TetradSearch$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-new"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-new}{}}}
\subsection{Method \code{new()}}{
Initializes the \code{TetradSearch} object, creating new Java objects for
\code{knowledge} and \code{params}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_test"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_test}{}}}
\subsection{Method \code{set_test()}}{
Sets the independence test to use in Tetrad.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_test(method, ..., mc = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{method}}{(character) Name of the test method (e.g., "chi_square", "fisher_z").}

\item{\code{...}}{Additional arguments passed to the private test-setting methods.}

\item{\code{mc}}{(logical) If TRUE, sets this test for the Markov checker \code{mc_test}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self}, for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_score"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_score}{}}}
\subsection{Method \code{set_score()}}{
Sets the scoring function to use in Tetrad.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_score(method, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{method}}{(character) Name of the score (e.g., "sem_bic", "ebic", "bdeu").}

\item{\code{...}}{Additional arguments passed to the private score-setting methods.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_alg"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_alg}{}}}
\subsection{Method \code{set_alg()}}{
Sets the causal discovery algorithm to use in Tetrad.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_alg(method, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{method}}{(character) Name of the algorithm (e.g., "fges", "pc", "fci", etc.).}

\item{\code{...}}{Additional parameters passed to the private algorithm-setting methods.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly returns \code{self}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_tier_forbidden_within"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_tier_forbidden_within}{}}}
\subsection{Method \code{set_tier_forbidden_within()}}{
Forbids or allows connections within a given tier of variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_tier_forbidden_within(tier, forbiddenWithin = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tier}}{(numeric) The tier index.}

\item{\code{forbiddenWithin}}{(logical) If TRUE, variables in the same tier cannot connect to each other.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_knowledge"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_knowledge}{}}}
\subsection{Method \code{set_knowledge()}}{
Sets the background knowledge object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_knowledge(knowledge_obj)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{knowledge_obj}}{An object containing Tetrad knowledge (must implement \code{get_tetrad_knowledge}).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_parameters_for_function"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_parameters_for_function}{}}}
\subsection{Method \code{get_parameters_for_function()}}{
Retrieves the argument names of a matching private function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_parameters_for_function(fn_pattern)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fn_pattern}}{(character) A pattern that should match a private method name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(character) The names of the parameters.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-run_search"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-run_search}{}}}
\subsection{Method \code{run_search()}}{
Runs the chosen Tetrad algorithm on the data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$run_search(
  data = NULL,
  bootstrap = FALSE,
  bhat = FALSE,
  unstable_bhat = FALSE,
  stable_bhat = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(optional) If provided, overrides the previously set data.}

\item{\code{bootstrap}}{(logical) If TRUE, bootstrapped graphs will be generated.}

\item{\code{bhat}}{(logical) If TRUE, retrieve the BHat adjacency matrix.}

\item{\code{unstable_bhat}}{(logical) If TRUE, retrieve unstable BHats.}

\item{\code{stable_bhat}}{(logical) If TRUE, retrieve stable BHats.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, but populates \code{self$java} with the resulting graph.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-run_gango"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-run_gango}{}}}
\subsection{Method \code{run_gango()}}{
Runs an alternative FGES search, then orients edges using RSkew.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$run_gango(score, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{score}}{(Java object) The scoring object.}

\item{\code{data}}{(Java object) The dataset (Java) to be used.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(Java object) The resulting graph from RSkew orientation.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_bootstrapping"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_bootstrapping}{}}}
\subsection{Method \code{set_bootstrapping()}}{
Configures bootstrapping parameters for the Tetrad search.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_bootstrapping(
  number_resampling = 0,
  percent_resample_size = 100,
  add_original = TRUE,
  with_replacement = TRUE,
  resampling_ensemble = 1,
  seed = -1
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{number_resampling}}{(integer) Number of bootstrap samples.}

\item{\code{percent_resample_size}}{(numeric) Percentage of sample size for each bootstrap.}

\item{\code{add_original}}{(logical) If TRUE, add the original dataset to the bootstrap set.}

\item{\code{with_replacement}}{(logical) If TRUE, sampling is done with replacement.}

\item{\code{resampling_ensemble}}{(integer) How the resamples are used or aggregated.}

\item{\code{seed}}{(integer) Random seed, or -1 for none.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_data"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_data}{}}}
\subsection{Method \code{set_data()}}{
Sets or overrides the data used by Tetrad.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_data(data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(data.frame) The new data to load.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_verbose"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_verbose}{}}}
\subsection{Method \code{set_verbose()}}{
Toggles the verbosity in Tetrad.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_verbose(verbose)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{(logical) TRUE to enable verbose logging, FALSE otherwise.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-set_time_lag"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-set_time_lag}{}}}
\subsection{Method \code{set_time_lag()}}{
Sets an integer time lag for time-series algorithms.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$set_time_lag(time_lag = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{time_lag}}{(integer) The time lag to set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_data"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_data}{}}}
\subsection{Method \code{get_data()}}{
Retrieves the current Java data object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_data()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(Java object) Tetrad dataset.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_verbose"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_verbose}{}}}
\subsection{Method \code{get_verbose()}}{
Checks if verbose logging is enabled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_verbose()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(logical) TRUE if verbose mode is on, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_knowledge"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_knowledge}{}}}
\subsection{Method \code{get_knowledge()}}{
Returns the background knowledge object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_knowledge()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(Java object) Tetrad Knowledge.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_java"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_java}{}}}
\subsection{Method \code{get_java()}}{
Gets the main Java result object (usually a graph) from the last search.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_java()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(Java object) The Tetrad result graph or model.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_string"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_string}{}}}
\subsection{Method \code{get_string()}}{
Returns the string representation of a given Java object or \code{self$java}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_string(java_obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) If NULL, uses \code{self$java}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(character) The \code{toString()} of that Java object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_dag_string"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_dag_string}{}}}
\subsection{Method \code{get_dag_string()}}{
Converts a CPDAG to a DAG and returns it as a string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_dag_string(java_obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) If NULL, uses \code{self$java} as the CPDAG.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(character) The DAG in string form.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_dag_java"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_dag_java}{}}}
\subsection{Method \code{get_dag_java()}}{
Converts a CPDAG to a DAG and returns it as a Java object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_dag_java(java_obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) CPDAG object. If NULL, uses \code{self$java}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(Java object) The resulting DAG.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_causal_learn"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_causal_learn}{}}}
\subsection{Method \code{get_causal_learn()}}{
Translates a Tetrad graph into a \code{causal_learn} compatible structure.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_causal_learn(java_obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) A Tetrad graph. If NULL, uses \code{self$java}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(Java object) The translated \code{causal_learn} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_graph_to_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_graph_to_matrix}{}}}
\subsection{Method \code{get_graph_to_matrix()}}{
Converts a Tetrad graph into a matrix representation with coded endpoints.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_graph_to_matrix(
  java_obj = NULL,
  null_ept = 0,
  circle_ept = 1,
  arrow_ept = 2,
  tail_ept = 3
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) The graph to convert. If NULL, uses \code{self$java}.}

\item{\code{null_ept}}{(numeric) Code for a null endpoint.}

\item{\code{circle_ept}}{(numeric) Code for a circle endpoint.}

\item{\code{arrow_ept}}{(numeric) Code for an arrow endpoint.}

\item{\code{tail_ept}}{(numeric) Code for a tail endpoint.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(matrix) The adjacency matrix with these endpoint codes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_dot"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_dot}{}}}
\subsection{Method \code{get_dot()}}{
Produces a DOT (Graphviz) representation of the graph.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_dot(java_obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) If NULL, uses \code{self$java}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(character) The DOT-format string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_xml"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_xml}{}}}
\subsection{Method \code{get_xml()}}{
Returns an XML representation of the graph.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_xml(java_obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) If NULL, uses \code{self$java}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(character) The XML string.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_lavaan"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_lavaan}{}}}
\subsection{Method \code{get_lavaan()}}{
Returns a lavaan syntax representation of the graph.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_lavaan(java_obj = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{java_obj}}{(Java object, optional) If NULL, uses \code{self$java}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(character) The model in lavaan syntax.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-bootstrap_graph"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-bootstrap_graph}{}}}
\subsection{Method \code{bootstrap_graph()}}{
Retrieves a particular bootstrapped graph by index.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$bootstrap_graph(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{(integer) Zero-based index of the graph in \code{bootstrap_graphs}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(Java object) The requested bootstrapped graph.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-bootstrap_dot"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-bootstrap_dot}{}}}
\subsection{Method \code{bootstrap_dot()}}{
Returns a DOT representation of a bootstrapped graph by index.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$bootstrap_dot(index)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{index}}{(integer) Zero-based index of the graph in \code{bootstrap_graphs}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(character) The graph in DOT format.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-is_legal_pag"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-is_legal_pag}{}}}
\subsection{Method \code{is_legal_pag()}}{
Checks if a graph is a valid Partial Ancestral Graph (PAG).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$is_legal_pag(graph)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph}}{(Java object) The graph to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(logical) TRUE if valid, FALSE otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-is_legal_pag_reason"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-is_legal_pag_reason}{}}}
\subsection{Method \code{is_legal_pag_reason()}}{
Prints the reason why a PAG is invalid, if it is.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$is_legal_pag_reason(graph)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph}}{(Java object) The PAG to check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None (prints directly).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-all_subsets_independencefact_s"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-all_subsets_independencefact_s}{}}}
\subsection{Method \code{all_subsets_independencefact_s()}}{
Finds all local Markov independence facts in the given graph.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$all_subsets_independencefact_s(graph)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph}}{(Java object) The Tetrad graph to analyze.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(list) A list of vectors describing each independence fact.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-all_subsets_dependencefact_s"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-all_subsets_dependencefact_s}{}}}
\subsection{Method \code{all_subsets_dependencefact_s()}}{
Finds all local Markov dependence facts in the given graph.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$all_subsets_dependencefact_s(graph)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph}}{(Java object) The Tetrad graph to analyze.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(list) A list of vectors describing each dependence fact.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-markov_check"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-markov_check}{}}}
\subsection{Method \code{markov_check()}}{
Performs a Markov check on the given graph using the \code{mc_test} if available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$markov_check(
  graph,
  percent_resample = 1,
  condition_set_type = .jfield("edu/cmu/tetrad/search/utils/ConditioningSetType", "S",
    "ORDERED_LOCAL_MARKOV"),
  remove_extraneous = FALSE,
  parallelized = TRUE,
  sample_size = -1
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph}}{(Java object) The graph to check.}

\item{\code{percent_resample}}{(numeric) Fraction of the data to resample each iteration.}

\item{\code{condition_set_type}}{(Java enum) E.g. \code{LOCAL_MARKOV}, \code{ORDERED_LOCAL_MARKOV}.}

\item{\code{remove_extraneous}}{(logical) If TRUE, tries removing extraneous variables in conditioning sets.}

\item{\code{parallelized}}{(logical) Whether to run Markov check in parallel.}

\item{\code{sample_size}}{(integer) If not -1, overrides the sample size used.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(list) A list of test statistics and p-values from Markov check.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_mc_ind_pvalues"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_mc_ind_pvalues}{}}}
\subsection{Method \code{get_mc_ind_pvalues()}}{
Gets p-values for independence from the Markov check results.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_mc_ind_pvalues()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(numeric) Vector of p-values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-get_adjustment_sets"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-get_adjustment_sets}{}}}
\subsection{Method \code{get_adjustment_sets()}}{
Retrieves a set of adjustment sets from a Tetrad graph, for a given source and target.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$get_adjustment_sets(
  graph,
  source,
  target,
  max_num_sets = 10,
  max_distance_from_point = 5,
  near_which_endpoint = 1,
  max_path_length = 20
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph}}{(Java object) Tetrad graph.}

\item{\code{source}}{(character) Name of the source variable.}

\item{\code{target}}{(character) Name of the target variable.}

\item{\code{max_num_sets}}{(integer) Maximum number of adjustment sets to return.}

\item{\code{max_distance_from_point}}{(integer) Restricts the search radius around endpoints.}

\item{\code{near_which_endpoint}}{(integer) Which endpoint to measure distance from.}

\item{\code{max_path_length}}{(integer) Maximum path length to consider.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(Java object) The Tetrad result of the \code{adjustmentSets} call.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TetradSearch-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TetradSearch-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TetradSearch$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
