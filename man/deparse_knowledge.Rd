% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knowledge.R
\name{deparse_knowledge}
\alias{deparse_knowledge}
\title{Deparse a knowledge object to knowledge() mini-DSL code}
\usage{
deparse_knowledge(.kn, df_name = NULL)
}
\arguments{
\item{.kn}{A \code{knowledge} object.}

\item{df_name}{Optional name of the data frame you used
(used as the first argument to \code{knowledge()}).  If \code{NULL},
\code{knowledge()} is called with no data frame.}
}
\value{
A single string (with newlines) of R code.
}
\description{
Given a \code{knowledge} object, return a single string containing
the R code (using \code{knowledge()}, \code{tier()}, \code{forbidden()}, \code{required()})
that would rebuild that same object.
}
\examples{
# turn a knowledge object back into DSL code
data(tpcExample)

kn <- knowledge(
  tpcExample,
  tier(
    child ~ starts_with("child"),
    youth ~ starts_with("youth"),
    old ~ starts_with("old")
  ),
  required(child_x1 ~ youth_x3),
  forbidden(oldage_x6 ~ child_x1)
)

kn <- forbid_tier_violations(kn)

code <- deparse_knowledge(kn, df_name = "tpcExample")

cat(code)
# printed output:
# knowledge(tpcExample,
#   tier(
#     child ~ child_x1 + child_x2,
#     youth ~ youth_x3 + youth_x4,
#     old ~ oldage_x5 + oldage_x6
#   ),
#   forbidden(
#     oldage_x5 ~ child_x1 + child_x2 + youth_x3 + youth_x4,
#     oldage_x6 ~ child_x1 + child_x2 + youth_x3 + youth_x4,
#     youth_x3 ~ child_x1 + child_x2,
#     youth_x4 ~ child_x1 + child_x2
#   ),
#   required(
#     child_x1 ~ youth_x3
#   )
# )
}
