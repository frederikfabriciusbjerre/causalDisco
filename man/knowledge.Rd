% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knowledge.R
\name{knowledge}
\alias{knowledge}
\title{Knowledge Mini-DSL constructor (\code{tier()}, \code{forbidden()}, \code{required()})}
\usage{
knowledge(...)
}
\arguments{
\item{...}{Either
\itemize{
\item a single \strong{data frame} (first argument) whose column names initialise the
variable set and freeze the knowledge object, followed by
\item zero or more calls to the mini‑DSL:
\code{tier()}, \code{forbidden()}, \code{required()}, or \code{exogenous()} (aliases: \code{exo()},
\code{root()}).
}

For \code{tier()} you may pass one or more two‑sided \strong{formulas}
(\code{tier(1 ~ x + y)}, \code{tier("baseline" ~ starts_with("V"))}) or a single
numeric vector shortcut matching the number of variables to set tiers by
index. \code{forbidden()}/\code{required()} take one or more two‑sided formulas
(\code{from ~ to}), where each side can use tidyselect semantics to select
multiple variables. \code{exogenous()}/\code{exo()}/\code{root()} take variable selectors
(names or tidyselect), possibly multiple. Arguments are evaluated in order;
only these calls are allowed.}
}
\value{
A populated \code{knowledge} object.
}
\description{
Accepts an optional data frame followed by calls built from \strong{formulas}:
\itemize{
\item \code{tier( 1 ~ V1 + V2, exposure ~ E )}
\item \code{forbidden( V1 ~ V4, V2 ~ V4)}
\item \code{required ( V1 ~ V2 )}
}
}
\details{
The first argument can be a data frame, which will be used to populate the
\code{knowledge} object with variable names. If you later add variables with
add_* verbs, this will throw a warning, since the knowledge object will
be \emph{frozen}. You can unfreeze a knowledge object by using the function
\code{unfreeze(knowledge)}.

If no data frame is provided, the
\code{knowledge} object will be empty until variables are added with \code{tier()},
\code{forbidden()}, or \code{required()}. You can also populate the object with
the \code{add_vars()} verb.

\code{tier()} assigns variables to tiers. Tiers are internally numbered, starting
with 1. If you provide a numeric literal, it will be used as the tier index.
If you provide a symbol or string, it will be used as a label. The order of
the provided tiers will be used as the order of the tiers in the object,
unless tiers are specified with numeric literals. This function takes
formulas as input. The left-hand side of the formula is the \emph{tier} and the
right-hand side is the \emph{variables}. You can also use tidyselect syntax to
specify the variables. For example, \code{tier(1 ~ starts_with("V"))} will assign
all variables starting with "V" to tier 1.

The \code{forbidden()} and \code{required()} functions add edges to the knowledge
object. The edges are added as directed edges by default, currently there is
no theoretical support for other edge types than these.
These functions also take formulas as input.
The left-hand side of the formula is the \emph{from} variable, and the right-hand
side is the \emph{to} variable.
}
\examples{
### knowledge() example ###

# build knowledge from a data frame and a few DSL calls
data(tpcExample)
df <- head(tpcExample)

# knowledge objects are made with the knowledge() function
kn <- knowledge()


# knowledge objects contain tier information, forbidden and required edges
kn <- knowledge(
  tier(
    1 ~ V1 + V2,
    2 ~ V3
  ),
  required(V1 ~ V2),
  forbidden(V3 ~ V1)
)

# if a data frame is provided, variable names are checked against it
kn <- knowledge(
  df,
  tier(
    1 ~ child_x1 + child_x2,
    2 ~ youth_x3 + youth_x4,
    3 ~ oldage_x5 + oldage_x6
  )
)

# throws error
try(
  knowledge(
    df,
    tier(
      1 ~ child_x1 + child_x2,
      2 ~ youth_x3 + youth_x4,
      3 ~ oldage_x5 + woops
    ) # wrong name
  )
)

# using tidyselect helpers
kn <- knowledge(
  df,
  tier(
    1 ~ starts_with("child"), # can use tidyselect helpers
    2 ~ youth_x3 + youth_x4, # do not need quotes for tiers or variables
    3 ~ starts_with("oldage")
  ) # doesn't have to match data naming
)

# custom tier naming
kn <- knowledge(
  df,
  tier(
    "child" ~ starts_with("child"), # can use tidyselect helpers
    youth ~ starts_with("youth"), # do not need quotes for tiers
    elderly ~ starts_with("oldage")
  ) # doesn't have to match data naming
)

# There is also required and forbidden edges, which are specified like so
kn <- knowledge(
  df,
  required(child_x1 ~ youth_x3),
  forbidden(oldage_x6 ~ child_x1)
)

# You can also add exogenous variables
kn <- knowledge(
  df,
  exogenous(child_x1),
  exo(child_x2), # shorthand
  root(youth_x3) # another shorthand
)

# You can also build knowledge with a verb pipeline
kn <-
  knowledge() |>
  add_vars(c("A", "B", "C", "D")) |> # knowledge now only takes these variables
  add_tier(One) |>
  add_to_tier("One" ~ A + B) |>
  add_tier(2, after = One) |>
  add_to_tier(2 ~ C + D) |>
  forbid_edge("A" ~ C) |>
  require_edge(A ~ B)

# Mix DSL start + verb refinement
kn <-
  knowledge(
    tier(1 ~ V5, 2 ~ V6),
    forbidden(V5 ~ V6)
  ) |>
  add_tier(3, after = "2") |>
  add_to_tier(3 ~ V7) |> # add third tier later
  add_root(V1) |> # three ways to add roots
  add_exo(V2) |>
  add_exogenous(V3)

# Using seq_tiers for larger datasets
df <- as.data.frame(
  matrix(runif(100), # 100 random numbers in (0,1)
    nrow = 1,
    ncol = 100,
    byrow = TRUE
  )
)

names(df) <- paste0("X_", 1:100) # label the columns X_1,..., X_100

kn <- knowledge(
  df,
  tier(
    seq_tiers(
      1:100,
      ends_with("_{i}")
    )
  ),
  required(X_1 ~ X_2)
)

df <- data.frame(
  X_1 = 1,
  X_2 = 2,
  tier3_A = 3,
  Y5_ok = 4,
  check.names = FALSE
)

kn_seq_tiers2 <- knowledge(
  df,
  tier(
    seq_tiers(1:2, ends_with("_{i}")), # X_1, X_2
    seq_tiers(3, starts_with("tier{i}")), # tier3_
    seq_tiers(5, matches("Y{i}_ok")) # exact match
  )
)
}
\seealso{
\code{\link[=add_vars]{add_vars()}} \code{\link[=add_tier]{add_tier()}} \code{\link[=add_to_tier]{add_to_tier()}} \code{\link[=forbid_edge]{forbid_edge()}}
\code{\link[=require_edge]{require_edge()}} \code{\link[=add_exogenous]{add_exogenous()}} \code{\link[=forbid_tier_violations]{forbid_tier_violations()}} \code{\link[=seq_tiers]{seq_tiers()}}
}
