% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knowledge.R, R/knowledge_testing.R
\name{knowledge}
\alias{knowledge}
\title{Construct a \code{KnowledgeObj} with a Mini‑DSL}
\usage{
knowledge(...)

knowledge(...)
}
\arguments{
\item{...}{One or more calls to \code{tier()}, \code{forbidden()}, or
\code{required()}.  Any other call or a non‑call argument triggers an
error.}
}
\value{
A populated \link{KnowledgeObj}.

A populated \code{knowledge} object.
}
\description{
\code{knowledge()} is a user‑friendly wrapper that builds a
\link{KnowledgeObj} by evaluating a sequence of
calls to the helper functions \code{tier()}, \code{forbidden()}, and
\code{required()}.
Each helper adds information to the underlying R6 object, which is then
returned for further use in causal‑discovery algorithms.

Accepts an optional data frame followed by calls built from \strong{formulas}:
\itemize{
\item \code{tier( 1 ~ V1 + V2, exposure ~ E )}
\item \code{forbidden( V1 ~ V4, V2 ~ V4, edge_type = "undirected" )}
\item \code{required ( V1 ~ V2 )}
}
}
\details{
\subsection{Helper functions}{
\itemize{
\item \strong{tier(tier, vars)} — Pairs a tier number with a character
vector of variable names.  May be repeated.
\item \strong{forbidden(source, target)} — Registers a forbidden edge
\code{source → target}.  Accepts multiple pairs, either as separate
arguments or as a single character vector of length 2 × n.
\item \strong{required(source, target)} — Registers a required edge
\code{source → target}.  Same calling conventions as
\code{forbidden()}.
}
}
}
\examples{
# number of samples
n <- 10**4
# continuous data example
V1 <- rnorm(n, 0, 1)
V2 <- 0.5 * V1 + rnorm(n, 0, 0.5)
V3 <- V2 + rnorm(n, 0, 0.1)
V4 <- V3 + rnorm(n, 0, 1)
V5 <- rnorm(n, 0, 1)
V6 <- rnorm(n, 0, 1) + 0.7 * V5

df <- data.frame(V1, V2, V3, V4, V5, V6)

# set knowledge
my_knowledge <- knowledge(
  tier(
    1, c("V1", "V2", "V3"),
    2, c("V4", "V5", "V6")
  ),
  forbidden("V1", "V6"), # single pair
  forbidden(c("V2", "V6")), # can be given as vector as well
  required(
    c("V1", "V2"), # two pairs can be given like this as well
    c("V2", "V3")
  )
)


}
